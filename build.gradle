group 'ssbgp'
version properties.get('application.version')

buildscript {
    ext.kotlin_version = '1.2.10'
    ext.dokka_version = '0.9.15'
    ext.junit_version = '1.0.0-M4'
    ext.junit5_version = '5.0.0-M4'
    ext.spek_version = '1.1.2'

    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version"
        classpath "org.junit.platform:junit-platform-gradle-plugin:$junit_version"
    }
}

apply plugin: 'kotlin'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'org.junit.platform.gradle.plugin'

junitPlatform {
    filters {
        engines {
            include 'spek'
        }
    }
}

repositories {
    mavenCentral()
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
}

dependencies {
    testCompile "org.junit.jupiter:junit-jupiter-api:$junit5_version"
    testCompile "org.jetbrains.spek:spek-api:$spek_version"
    testCompile "org.hamcrest:hamcrest-all:1.3"
    testCompile "org.mockito:mockito-core:2.8.9"
    testCompile "com.nhaarman:mockito-kotlin-kt1.1:1.5.0"

    testRuntime "org.junit.jupiter:junit-jupiter-engine:$junit5_version"
    testRuntime "org.jetbrains.spek:spek-junit-platform-engine:$spek_version"
    testRuntime "org.junit.platform:junit-platform-launcher:$junit_version"

    compile "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    compile "com.github.inamik.text.tables:inamik-text-tables:1.0-SNAPSHOT"
    compile 'org.apache.commons:commons-csv:1.4'
    compile group: 'commons-cli', name: 'commons-cli', version: '1.4'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/javadoc"
}

task enabledMockingFinalClasses << {
    def mockMakerFile = new File("$projectDir/src/test/resources/mockito-extensions/org.mockito.plugins.MockMaker")
    mockMakerFile.parentFile.mkdirs()
    mockMakerFile.createNewFile()
    mockMakerFile.write("mock-maker-inline")
}

jar {

    task updateProjectVersion {
        def versionFile = new File("$projectDir/src/main/resources/version.properties")
        versionFile.parentFile.mkdirs()
        versionFile.createNewFile()
        versionFile.write("application.version=${version}")
    }

    manifest {
        attributes 'Main-Class': 'main.MainKt'
    }

    // This line of code recursively collects and copies all of a project's files
    // and adds them to the JAR itself. One can extend this task, to skip certain
    // files or particular types at will
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
}